leaflet(nigerian_markets_sf) %>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
mapview(nigerian_markets_sf)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Stadia.StamenTonerLite, group = "Toner Lite") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
# Load necessary libraries
library(dplyr)
# install necessary library
install.packages("sf")
install.packages("mapview")
install.packages("leaflet")
library(sf)
library(mapview)
library(leaflet)
# Read CSV file containing Nigerian markets data
nigerian_markets <- read.csv("C:/Users/Open User/OneDrive/Desktop/Muideen_SAIL/nigeria_markets.csv")
# Display the first few rows of the dataset to check its structure
head(nigerian_markets)
# Display the names of the columns in the dataset
names(nigerian_markets)
# Convert the dataframe to a spatial dataframe (sf object)
nigerian_markets_sf <- nigerian_markets %>%
st_as_sf(
coords = c("longitude", "latitude"), # Use the correct column names for coordinates
crs = 4326 # Coordinate reference system, EPSG:4326 for WGS84
)
# Check the structure of the spatial dataframe
str(nigerian_markets_sf)
# Print a few rows to check the spatial dataframe
print(nigerian_markets_sf)
# Visualize the spatial dataframe on a map to ensure it's correctly transformed
mapview(nigerian_markets_sf)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "YOUR_API_KEY")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
install.packages("tidyverse")
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
# Load necessary libraries
library(dplyr)
# install necessary library
install.packages("sf")
install.packages("mapview")
install.packages("leaflet")
install.packages("tidyverse")
library(tidyverse)
library(sf)
library(mapview)
library(leaflet)
# Read CSV file containing Nigerian markets data
nigerian_markets <- read.csv("C:/Users/Open User/OneDrive/Desktop/Muideen_SAIL/nigeria_markets.csv")
# Display the first few rows of the dataset to check its structure
head(nigerian_markets)
# Display the names of the columns in the dataset
names(nigerian_markets)
# Convert the dataframe to a spatial dataframe (sf object)
nigerian_markets_sf <- nigerian_markets %>%
st_as_sf(
coords = c("longitude", "latitude"), # Use the correct column names for coordinates
crs = 4326 # Coordinate reference system, EPSG:4326 for WGS84
)
# Check the structure of the spatial dataframe
str(nigerian_markets_sf)
# Print a few rows to check the spatial dataframe
print(nigerian_markets_sf)
# Visualize the spatial dataframe on a map to ensure it's correctly transformed
mapview(nigerian_markets_sf)
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
install.packages("tidyverse")
install.packages("leaflet")
install.packages("mapview")
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles("Stadia.StamenTonerLite", options = providerTileOptions(apiKey = "664c6863-3beb-4c5c-91b6-e9f69793390d")) %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addMarkers(
label = ~market_name, # Use market_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap, group = "OpenStreetMap") %>%
addLayersControl(baseGroups = c("OpenStreetMap")) %>%
addMarkers(
label = nigerian_markets_sf$market_settlement_name,
clusterOptions = markerClusterOptions(),
popup = ifelse(nigerian_markets_sf$OBJECTID !=
nigerian_markets_sf$OBJECTID,
"Not sure of the market's location"))
# Convert the dataframe to a spatial dataframe (sf object)
nigerian_markets_sf <- nigerian_markets %>%
st_as_sf(
coords = c("longitude", "latitude"), # Use the correct column names for coordinates
crs = 4326 # Coordinate reference system, EPSG:4326 for WGS84
)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap, group = "OpenStreetMap") %>%
addLayersControl(baseGroups = c("OpenStreetMap")) %>%
addMarkers(
label = nigerian_markets_sf$market_settlement_name,
clusterOptions = markerClusterOptions(),
popup = ifelse(nigerian_markets_sf$OBJECTID !=
nigerian_markets_sf$OBJECTID,
"Not sure of the market's location"))
# Add the leaflet map with various tile layers and markers
leaflet(nigerian_markets_sf) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OpenStreetMap") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("OpenStreetMap", "World Imagery")) %>%
addMarkers(
data = nigerian_markets_sf, # Pass the spatial data
label = ~market_settlement_name, # Use market_settlement_name for the label
clusterOptions = markerClusterOptions(),
popup = ~ifelse(!is.na(OBJECTID),  # Use OBJECTID for the popup condition
as.character(OBJECTID),  # Use OBJECTID for the popup value
"Not sure of the market's location")
)
install.packages("usethis")
usethis::edit_r_environ()
STADIAMAP_API_Key = 664c6863-3beb-4c5c-91b6-e9f69793390d
usethis::edit_r_environ()
STADIAMAP_API_KEY=664c6863-3beb-4c5c-91b6-e9f69793390d
getwd("C:/Users/Open User/OneDrive/Documents/.Renviron")
setwd("C:/Users/Open User/OneDrive/Documents/.Renviron")
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
install.packages("manipulate")
install.packages("BSDA")
install.packages("ggfortify")
# Set up a 1x2 plotting layout
par(mfrow=c(1,2))
# Plot histogram for child heights in Galton's dataset
hist(galton$child, breaks=100, col="lightblue", border="pink", main="Child Heights", xlab="Height")
# Plot histogram for parent heights in Galton's dataset
hist(galton$parent, breaks=100, col="lightblue", border="pink", main="Parent Heights", xlab="Height")
# Load the UsingR library for accessing Galton's dataset
library(UsingR)
# Load ggplot2 for plotting (not used in this specific code, but often necessary for plotting)
library(ggplot2)
# Set up a 1x2 plotting layout
par(mfrow=c(1,2))
# Plot histogram for child heights in Galton's dataset
hist(galton$child, breaks=100, col="lightblue", border="pink", main="Child Heights", xlab="Height")
# Plot histogram for parent heights in Galton's dataset
hist(galton$parent, breaks=100, col="lightblue", border="pink", main="Parent Heights", xlab="Height")
# Load the necessary libraries
library(ggplot2)
library(UsingR)  # Assuming UsingR library is needed to access 'galton' dataset
# Plot a histogram of child heights with ggplot
ggplot(galton, aes(x = child)) +
# Add histogram bars with a binwidth of 1, colored light blue
geom_histogram(binwidth = 1, colour = "lightblue", fill = "lightblue") +
# Add a vertical line at the mean of child heights, colored blue with a line width of 5
geom_vline(xintercept = mean(galton$child), colour = "blue", lwd = 5)
# Load the necessary libraries
library(ggplot2)
library(UsingR)  # Assuming UsingR library is needed to access 'galton' dataset
# Plot a scatter plot of parent heights against child heights with ggplot
ggplot(galton, aes(parent, child)) +
# Add points for each data pair
geom_point() +
# Add a linear regression line with confidence intervals turned off
geom_smooth(method = "lm", se = FALSE)
# Import necessary library
library(dplyr)
# Convert the Galton data into a frequency table
freq_galton <- as.data.frame(table(galton$child, galton$parent))
# Rename columns for clarity
names(freq_galton) <- c("child", "parent", "freq")
# Plot the data
plot(as.numeric(as.vector(freq_galton$parent)),
as.numeric(as.vector(freq_galton$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .05 * freq_galton$freq,
xlab = "Parents", ylab = "Children")
# Fit a linear model
lm1 <- lm(galton$child ~ galton$parent)
# Add the regression line to the plot
lines(galton$parent, lm1$fitted, col = "red", lwd = 3)
# Load the necessary library
library(ggplot2)
# Fit a linear model with price as the response variable and carat as the predictor variable
fit <- lm(price ~ carat, data = diamond)
# Display the coefficients of the linear model
coef(fit)
# The intercept (a) is the expected price of a diamond with zero carat
round(coef(fit)[1], 2)
# The slope (b) is the dollar increase in price for every carat increase in the mass of the diamond
round(coef(fit)[2], 2)
# Display the summary of the fitted model
summary(fit)
# Load the necessary library
library(datasets)
# Fit a linear model with mpg as the response variable, and wt and cyl as the predictor variables
model <- lm(mpg ~ wt + cyl, data = mtcars)
# Display the intercept of the model
model$coefficients[1]
# If we want to fit the model without an intercept, we can use -1 in the formula
model_no_intercept <- lm(mpg ~ wt + cyl - 1, data = mtcars)
# Display the coefficients of the model without the intercept
model_no_intercept$coefficients
# Load the necessary library
library(datasets)
# Fit a linear model with mpg as the response variable, and wt and cyl as the predictor variables
model <- lm(mpg ~ wt + cyl, data = mtcars)
# Display the summary of the fitted model
summary(model)
# Fit a linear model with mpg as the response variable, and wt and cyl as the predictor variables
model <- lm(mpg ~ wt + cyl + carb, data = mtcars)
# Display the summary of the fitted model
summary(model)
# Load the necessary library
library(ggplot2)
# Fit a linear model with mpg as the response variable, and wt and cyl as the predictor variables
model <- lm(mpg ~ wt + cyl, data = mtcars)
# Create a ggplot object to visualize the residuals vs. fitted values
ggplot(data.frame(model$residuals), aes(x = model$fitted.values, y = model$residuals)) +
geom_point() +  # Add points for each observation
geom_hline(yintercept = 0) +  # Add a horizontal line at y = 0
labs(title = "Residual Plot", x = "Fitted Values", y = "Residuals")  # Add titles and labels
library(dplyr)
#Churn tenure MonthlyCharges
head(churning)
# Load the necessary library
library(dplyr)
# Select the Churn, tenure, and MonthlyCharges columns from the churning dataset
churning %>%
dplyr::select(Churn, tenure, MonthlyCharges)
library(dplyr)
library(dplyr)
#Churn tenure MonthlyCharges
head(churning)
# Load the necessary library
library(dplyr)
# Load the dataset (assuming it's in a CSV file called "churning.csv")
churning <- read.csv("C:\\Users\\Open User\\OneDrive\Desktop\\Muideen_SAIL\\WA_Fn-UseC_-Telco-Customer-Churn.csv")
# Load the necessary library
library(dplyr)
# Load the dataset (assuming it's in a CSV file called "churning.csv")
churning <- read.csv("C:\\Users\\Open User\\OneDrive\Desktop\\Muideen_SAIL\\WA_Fn-UseC_-Telco-Customer-Churn.csv")
# Load the necessary library
library(dplyr)
# Load the dataset (assuming it's in a CSV file called "churning.csv")
churning <- read.csv("C:\\Users\\Open User\\OneDrive\\Desktop\\Muideen_SAIL\\WA_Fn-UseC_-Telco-Customer-Churn.csv")
#Churn tenure MonthlyCharges
head(churning)
# Select the Churn, tenure, and MonthlyCharges columns from the churning dataset
churning %>%
dplyr::select(Churn, tenure, MonthlyCharges)
# Load the necessary library
library(dplyr)
# Load the dataset (assuming it's in a CSV file called "churning.csv")
churning <- read.csv("C:\\Users\\Open User\\OneDrive\\Desktop\\Muideen_SAIL\\WA_Fn-UseC_-Telco-Customer-Churn.csv")
#Churn tenure MonthlyCharges
head(churning)
# Load the necessary library
library(dplyr)
# Create a binary churn variable (0 for "No", 1 for "Yes")
churning$churn <- ifelse(churning$Churn == "No", 0, 1)
# Fit a logistic regression model
model2 <- glm(churn ~ tenure + MonthlyCharges, data = churning, family = binomial)
# Display summary of the logistic regression model
summary(model2)
churning$churn <- ifelse(churning$Churn == "No", 0, 1)
lmChurn <- lm(churning$churn ~ churning$tenure + chunning$MonthlyCharges)
lmChurn <- lm(churning$churn ~ churning$tenure + churning$MonthlyCharges)
summary(lmChurn)$coef
# Load the necessary library (assuming dplyr is already loaded for dataset manipulation)
library(dplyr)
# Create a binary churn variable (0 for "No", 1 for "Yes")
churning$churn <- ifelse(churning$Churn == "No", 0, 1)
# Fit a linear regression model to predict churn based on tenure and MonthlyCharges
lmChurn <- lm(churning$churn ~ churning$tenure + churning$MonthlyCharges)
# Display coefficients of the linear regression model
summary(lmChurn)$coef
# Load the necessary library
library(dplyr)
# Load the dataset (assuming it's in a CSV file called "churning.csv")
churning <- read.csv("C:\\Users\\Open User\\OneDrive\\Desktop\\Muideen_SAIL\\WA_Fn-UseC_-Telco-Customer-Churn.csv")
#Churn tenure MonthlyCharges
head(churning)
# Select the Churn, tenure, and MonthlyCharges columns from the churning dataset
churning %>%
dplyr::select(Churn, tenure, MonthlyCharges)
# Load the necessary library
library(dplyr)
# Create a binary churn variable (0 for "No", 1 for "Yes")
churning$churn <- ifelse(churning$Churn == "No", 0, 1)
# Fit a logistic regression model
model2 <- glm(churn ~ tenure + MonthlyCharges, data = churning, family = binomial)
# Display summary of the logistic regression model
summary(model2)
# Fit a logistic regression model
model2 <- glm(churn ~ tenure + MonthlyCharges, data = churning, )
# Display summary of the logistic regression model
summary(model2)
# Load the necessary library (assuming dplyr is already loaded for dataset manipulation)
library(dplyr)
# Create a binary churn variable (0 for "No", 1 for "Yes")
churning$churn <- ifelse(churning$Churn == "No", 0, 1)
# Fit a linear regression model to predict churn based on tenure and MonthlyCharges
lmChurn <- lm(churning$churn ~ churning$tenure + churning$MonthlyCharges)
# Display coefficients of the linear regression model
summary(lmChurn)
# Display coefficients of the linear regression model
summary(lmChurn)$coef
head(covid_data)
names(covid_data)
library(tidyverse)
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-Eastern", length(South_Eastern)), South_Eastern),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
covid_data <- covid_data
names(covid_data)
North-Central <- c("Benue"," Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "Abuja")
library(tidyverse)
covid_data <- covid_data
names(covid_data)
North-Central <- c("Benue"," Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "Abuja")
# Load necessary library
library(dplyr)
# Define the vectors for each region
North_Central <- c("Benue", "Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "Abuja")
North_Eastern <- c("Adamawa", "Bauchi", "Borno", "Gombe", "Taraba", "Yobe")
North_Western <- c("Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Sokoto", "Zamfara")
South_Eastern <- c("Abia", "Anambra", "Ebonyi", "Enugu", "Imo")
South_South <- c("Akwa Ibom", "Bayelsa", "Cross River", "Delta", "Edo", "Rivers")
South_Western <- c("Ekiti", "Lagos", "Ogun", "Ondo", "Osun", "Oyo")
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-Eastern", length(South_Eastern)), South_Eastern),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
# Use mutate to add the new region column
covid_data <- covid_data %>%
mutate(region = state_region_mapping[states])
# View the updated dataset
head(covid_data)
names(covid_data)
view(covid_data)
# Load necessary library
library(dplyr)
# Define the vectors for each region
North_Central <- c("Benue", "Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "FCT")
North_Eastern <- c("Adamawa", "Bauchi", "Borno", "Gombe", "Taraba", "Yobe")
North_Western <- c("Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Sokoto", "Zamfara")
South_Eastern <- c("Abia", "Anambra", "Ebonyi", "Enugu", "Imo")
South_South <- c("Akwa Ibom", "Bayelsa", "Cross River", "Delta", "Edo", "Rivers")
South_Western <- c("Ekiti", "Lagos", "Ogun", "Ondo", "Osun", "Oyo")
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-Eastern", length(South_Eastern)), South_Eastern),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
# Use mutate to add the new region column
covid_data <- covid_data %>%
mutate(region = state_region_mapping[states])
# View the updated dataset
head(covid_data)
names(covid_data)
view(covid_data)
# Perform ANOVA test to compare the average number of deaths across regions
anova_result <- aov(total_death ~ region, data = covid_data)
# Display the summary of the ANOVA result
summary(anova_result)
str(covid_data)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
ggplot(covid_data,aes(region,total_death),fill=total_death)+geom_col()
ggplot(covid_data,aes(region,total_death),fill=region)+geom_col()
ggplot(covid_data,aes(region,total_death),fill=red)+geom_col()
ggplot(covid_data,aes(region,total_death),fill=region)+geom_col()
ggplot(covid_data,aes(region,total_death),fill=region)+geom_col()+labs(title = "Total deaths across the regions")
# Create the bar plot
ggplot(covid_data, aes(x = region, y = total_death, fill = region)) +
geom_col() +
labs(title = "Total Deaths Across the Regions", x = "Region", y = "Total Deaths") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_fill_brewer(palette = "Set3")
ggplot(covid_data,aes(region,total_death),fill=region)+geom_col()+labs(title = "Total deaths across the regions")
# Create the bar plot
ggplot(covid_data, aes(x = region, y = total_death, fill = region)) +
geom_col() +
labs(title = "Total Deaths Across the Regions", x = "Region", y = "Total Deaths") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_fill_brewer(palette = "Set3")
install.packages("shiny")
install.packages("ggplot2")
library(shiny)
library(ggplot2)
runApp('SAIL_Innonvation_LAB_R-Progamming/R_assignment')
library(shiny)
library(ggplot2)
runApp()
