labs(x = "gdp_at_2010_constant_market_prices", y = "gdp_at_2010_constant_basic_prices")
Gdp
# Reshape data from wide to long format for plotting
long_sector_data <-  clean_economy_data %>%
gather(key = "sector", value = "GDP_Contribution", agriculture, industry, services)
# Plot the area chart
ggplot(long_sector_data, aes(x = year, y = GDP_Contribution, fill = sector)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Sectoral Contributions to GDP Over Time", x = "Year", y = "GDP Contribution") +
theme(legend.position = "top") +
scale_fill_brewer(palette = "Set3")
# Calculate the sum of contributions for each sector
sector_sums <- clean_economy_data %>%
summarize(
total_agriculture = sum(agriculture, na.rm = TRUE),
total_industry = sum(industry, na.rm = TRUE),
total_services = sum(services, na.rm = TRUE)
)
# Print the sum of contributions for each sector
print(sector_sums)
#  During the period from 1990 to 2023, Nigeria's economy witnessed significant shifts in the contributions of different sectors to its Gross Domestic Product (GDP). Let's delve into the sectorial contributions to GDP over this period, highlighting key trends and notable developments.
#  During the period from 1990 to 2023, Nigeria's economy witnessed significant shifts in the contributions of different sectors to its Gross Domestic Product (GDP). Let's delve into the sectorial contributions to GDP over this period, highlighting key trends and notable developments.
#
#  During the period from 1990 to 2023, Nigeria's economy witnessed significant shifts in the contributions of different sectors to its Gross Domestic Product (GDP). Let's delve into the sectorial contributions to GDP over this period, highlighting key trends and notable developments.
#
#  From 1990 to 1995, the Agriculture sector made a modest contribution to GDP, hovering below 5000 units. Meanwhile, the Industry sector maintained a steady contribution in the range of 15000 units, indicating its stable presence in the economy. On the other hand, the Services sector emerged as a dominant force, with contributions exceeding 22000 units, reflecting its pivotal role in driving economic growth and development.
# comparing various inflation rate of all the presidents
library(ggplot2)
# Create the bar plot with rotated x-axis labels
inflation <- ggplot(clean_economy_data, aes(x = president, y = inflation_rate, fill = president)) +
geom_col() +
labs(title = "Inflation Rate by President") +
labs(x = "President", y = "Inflation Rate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Display the plot
ggplotly(inflation)
# comparing various inflation rate of all the presidents
library(ggplot2)
# Create the bar plot without x-axis labels
inflation <- ggplot(clean_economy_data, aes(x = president, y = inflation_rate, fill = president)) +
geom_col() +
labs(title = "Inflation Rate by President") +
labs(x = NULL, y = "Inflation Rate") +  # Remove x-axis label
theme(axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank())  # Remove x-axis ticks
# Display the plot
print(inflation)
# Display the plot
ggplotly(inflation)
#creating a scatter plot to see the correlation between unemployent and inflation rate
# Create the scatter plot
ggplot(clean_economy_data, aes(x = inflation_rate, y = unemployment)) +
geom_point() +
theme_minimal() +
labs(title = "Correlation between Inflation Rate and Unemployment",
x = "Inflation Rate",
y = "Unemployment")
library(ggplot2)
library(dplyr)
oruko <- unique(covid_data$states)
oruko <- unique(covid_data$states)
ambulanceData <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/nigeria_ambulances.csv")
#NIGERIA_ECONOMY_GROWTH_ANALYSIS_FROM_1960-2023 ASINGMENT
#load the required libraries
library(tidyverse)
library(explore)
library(readxl)
library(janitor)
library(DataExplorer)
library(plotly)
library(psych)
library(readxl)
#load the Dataset
economy_data <- read_excel("/home/muideen/Downloads/R_files/Nigeria_Economy.xlsx")
economy_data
#Inspecting the data showing the first six rows
head(economy_data)
#further inspection by showing the glimpse
glimpse(economy_data)
#SHowing the column headers
names(economy_data)
#cleaning the column headers
clean_economy_data <-  clean_names(economy_data)
clean_economy_data
#Checking the cleaned names
names(clean_economy_data)
#checking the data dimension
dim(clean_economy_data)
#Checking the datatypes
str(clean_economy_data)
#data summary statistics
summary(clean_economy_data)
##Describing both the quantitative and categorical columns
clean_economy_data %>% describe_all()
clean_economy_data %>% describe_cat(president)
#indroducing the data columns
clean_economy_data %>% introduce()
#plotting the intro
clean_economy_data %>% plot_intro()
clean_economy_data %>% plot_missing()
clean_economy_data %>% plot_density()
clean_economy_data %>% plot_histogram()
clean_economy_data %>% plot_bar()
## Relationships with maximum categories
clean_economy_data %>% plot_correlation(maxcat = 5)
clean_economy_data %>% plot_correlation(maxcat = 7)
#
#Giving all the names of the state without duplicate
president_names <- unique(clean_economy_data$president)
president_names
#filtering through the president's column to get names of presidents that are like the president's names
clean_economy_data2 <- clean_economy_data %>%
subset(president %in% president_names)
clean_economy_data2
#Using qplot to compare the inflation and unemployent rate of each gorvernment
qplot(inflation_rate, unemployment, data = clean_economy_data2, facets = . ~ president,
geom = c("point", "smooth"))
warning()
warning()
#creating a scatter plot to see the correlation between unemployent and inflation rate
# Create the scatter plot
ggplot(clean_economy_data, aes(x = inflation_rate, y = unemployment)) +
geom_point() +
theme_minimal() +
labs(title = "Correlation between Inflation Rate and Unemployment",
x = "Inflation Rate",
y = "Unemployment")
?BSDA
??BSDA
install.packages("BSDA")
# Load the BSDA library
library(BSDA)
# Set seed for reproducibility
set.seed(234)
# Generate sample data from a normal distribution (Average interaction with learning materials seconds per day)
cohort1 <- rnorm(n = 22, mean = 57, sd = 30)
# Perform one-sample Z-test
z_test_result <- z.test(cohort1, mu = 100, sigma.x = 30)
# Display the result
print(z_test_result)
print(cohort1)
# Load the BSDA library
library(BSDA)
# Set seed for reproducibility
set.seed(234)
# Generate sample data for both groups
emmyCool_group <- rnorm(n = 30, mean = 56, sd = 3)
print(emmyCool_group)
tope_group <- rnorm(n = 30, mean = 80, sd = 3)
print(tope_group)
# Run a Z-test to identify whether two population means are equal or different
z_test_result <- z.test(emmyCool_group, tope_group, alternative = "two.sided", mu = 0, sigma.x = 3, sigma.y = 3, conf.level = 0.95)
# Display the result
print(z_test_result)
# Load the UsingR library for accessing Galton's dataset
library(UsingR)
# Load ggplot2 for plotting (not used in this specific code, but often necessary for plotting)
library(ggplot2)
# Set up a 1x2 plotting layout
par(mfrow=c(1,2))
# Plot histogram for child heights in Galton's dataset
hist(galton$child, breaks=100, col="lightblue", border="pink", main="Child Heights", xlab="Height")
# Plot histogram for parent heights in Galton's dataset
hist(galton$parent, breaks=100, col="lightblue", border="pink", main="Parent Heights", xlab="Height")
head(galton)
height
height <- data("galton")
height
head(galton)
print(height)
summary(galton)
# Load necessary libraries
library(dplyr)        # For data manipulation
library(sf)           # For handling spatial data
library(mapview)      # For interactive maps
library(leaflet)      # For creating maps with multiple layers and markers
library(readxl)       # For reading Excel files
library(janitor)      # For cleaning data frames
library(tidygeocoder) # For geocoding addresses
# Load necessary libraries
install.packages("sf")
install.packages("mapview")
install.packages("leaflet")
install.packages("units")
# Load necessary libraries
install.packages("sf")
sudo apt-get install libudunits2-dev
# Load necessary libraries
install.packages("sf")
install.packages("mapview")
install.packages("mapview")
install.packages("leaflet")
# Load health center data from an Excel file
health_center_data <- read_excel("/home/muideen/Downloads/health_centre_locations.xlsx")
library(dplyr)        # For data manipulation
library(sf)           # For handling spatial data
library(mapview)      # For interactive maps
library(leaflet)      # For creating maps with multiple layers and markers
library(readxl)       # For reading Excel files
library(janitor)      # For cleaning data frames
library(tidygeocoder) # For geocoding addresses
# Load health center data from an Excel file
health_center_data <- read_excel("/home/muideen/Downloads/health_centre_locations.xlsx")
# View the first few rows of the dataset
head(health_center_data)
# Get a glimpse of the dataset structure
glimpse(health_center_data)
# Get the column names of the dataset
names(health_center_data)
# Clean the column names of the dataset
health_center_data_cleaned <- clean_names(health_center_data)
# View the cleaned column names
names(health_center_data_cleaned)
# View the cleaned dataset
health_center_data_cleaned
# Geocode the addresses (LGA) using the OpenStreetMap (OSM) method
geo_code_tbl <- health_center_data_cleaned %>%
geocode(address = lga, method = "osm")
# View the geocoded data
View(geo_code_tbl)
# Geocode the addresses (LGA) using the OpenStreetMap (OSM) method
geo_code_tbl <- health_center_data_cleaned %>%
geocode(address = lga, method = "osm")
# View the geocoded data
View(geo_code_tbl)
# Filter out rows with missing latitude and longitude values
geo_code_tbl_filtered <- geo_code_tbl %>%
filter(!is.na(lat) & !is.na(long))
# Convert the filtered dataframe to a spatial dataframe (sf object)
health_center_data_cleaned_sf <- geo_code_tbl_filtered %>%
st_as_sf(
coords = c("lat", "long"), # Use the correct column names for coordinates
crs = 4326 # Coordinate reference system, EPSG:4326 for WGS84
)
# Display the spatial data on an interactive map
mapview(health_center_data_cleaned_sf)
# View the cleaned column names
names(health_center_data_cleaned)
# Display the spatial data on an interactive map
mapview(health_center_data_cleaned_sf)
View(health_center_data_cleaned_sf)
# Add the leaflet map with various tile layers and markers
leaflet(health_center_data_cleaned_sf) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OpenStreetMap") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addLayersControl(baseGroups = c("OpenStreetMap", "World Imagery")) %>%
addMarkers(
data = health_center_data_cleaned_sf, # Pass the spatial data
label = ~facility_name, # Use facility_name for the label
clusterOptions = markerClusterOptions(), # Cluster the markers
popup = ~ifelse(!is.na(lga),  # Use lga for the popup condition
as.character(lga),  # Use lga for the popup value
"Not sure of the market's location") # Default popup text
)
# Load necessary library
library(dplyr)
# Define the vectors for each region
North_Central <- c("Benue", "Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "FCT")
North_Eastern <- c("Adamawa", "Bauchi", "Borno", "Gombe", "Taraba", "Yobe")
North_Western <- c("Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Sokoto", "Zamfara")
South_Eastern <- c("Abia", "Anambra", "Ebonyi", "Enugu", "Imo")
South_South <- c("Akwa Ibom", "Bayelsa", "Cross River", "Delta", "Edo", "Rivers")
South_Western <- c("Ekiti", "Lagos", "Ogun", "Ondo", "Osun", "Oyo")
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
# View the updated dataset
head(covid_data)
# Load necessary library
library(dplyr)
# Define the vectors for each region
North_Central <- c("Benue", "Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "FCT")
North_Eastern <- c("Adamawa", "Bauchi", "Borno", "Gombe", "Taraba", "Yobe")
North_Western <- c("Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Sokoto", "Zamfara")
South_Eastern <- c("Abia", "Anambra", "Ebonyi", "Enugu", "Imo")
South_South <- c("Akwa Ibom", "Bayelsa", "Cross River", "Delta", "Edo", "Rivers")
South_Western <- c("Ekiti", "Lagos", "Ogun", "Ondo", "Osun", "Oyo")
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
# View the updated dataset
head(covid_data)
covid_data <- read.csv("/home/muideen/Downloads/R_files/home/muideen/Downloads/R_files")
covid_data <- read.csv("/home/muideen/Downloads/R_files/covid19_nigeria_states.csv")
# Define the vectors for each region
North_Central <- c("Benue", "Kogi", "Kwara", "Nasarawa", "Niger", "Plateau", "FCT")
North_Eastern <- c("Adamawa", "Bauchi", "Borno", "Gombe", "Taraba", "Yobe")
North_Western <- c("Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Sokoto", "Zamfara")
South_Eastern <- c("Abia", "Anambra", "Ebonyi", "Enugu", "Imo")
South_South <- c("Akwa Ibom", "Bayelsa", "Cross River", "Delta", "Edo", "Rivers")
South_Western <- c("Ekiti", "Lagos", "Ogun", "Ondo", "Osun", "Oyo")
# Create a named vector for state to region mapping
state_region_mapping <- c(
setNames(rep("North-Central", length(North_Central)), North_Central),
setNames(rep("North-Eastern", length(North_Eastern)), North_Eastern),
setNames(rep("North-Western", length(North_Western)), North_Western),
setNames(rep("South-South", length(South_South)), South_South),
setNames(rep("South-Western", length(South_Western)), South_Western)
)
# View the updated dataset
head(covid_data)
names(covid_data)
view(covid_data)
str(covid_data)
# Use mutate to add the new region column
covid_data <- covid_data %>%
mutate(region = state_region_mapping[states])
# Perform ANOVA test to compare the average number of deaths across regions
anova_result <- aov(total_death ~ region, data = covid_data)
# Display the summary of the ANOVA result
summary(anova_result)
# Perform Tukey HSD post-hoc test
tukey_result <- TukeyHSD(anova_result)
# Display the summary of the Tukey HSD test
print(tukey_result)
# Create the bar plot
ggplot(covid_data, aes(x = region, y = total_death, fill = region)) +
geom_col() +
labs(title = "Total Deaths Across the Regions", x = "Region", y = "Total Deaths") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_fill_brewer(palette = "Set3")
library("ggplot2")
# Create the bar plot
ggplot(covid_data, aes(x = region, y = total_death, fill = region)) +
geom_col() +
labs(title = "Total Deaths Across the Regions", x = "Region", y = "Total Deaths") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_fill_brewer(palette = "Set3")
#Plotting the number of years used by each president
ggplot(tenure,aes(president,Year_Count,fill= president))+
geom_col()+theme_minimal() +
labs(title = "President's year count from 1990-2023",
x = "President",
y = "Year_count")
#NIGERIA_ECONOMY_GROWTH_ANALYSIS_FROM_1960-2023 ASINGMENT
#load the required libraries
library(tidyverse)
library(explore)
library(readxl)
library(janitor)
library(DataExplorer)
library(plotly)
library(forecast)
library(caret)
#Plotting the number of years used by each president
ggplot(tenure,aes(president,Year_Count,fill= president))+
geom_col()+theme_minimal() +
labs(title = "President's year count from 1990-2023",
x = "President",
y = "Year_count")
#load the Dataset
economy_data <- read_excel("/home/muideen/Downloads/R_files/Nigeria_Economy.xlsx")
#Inspecting the data showing the first six rows
head(economy_data)
#further inspection by showing the glimpse
glimpse(economy_data)
#SHowing the column headers
names(economy_data)
#cleaning the column headers
clean_economy_data <-  clean_names(economy_data)
clean_economy_data
#Checking the cleaned names
names(clean_economy_data)
#checking the data dimension
dim(clean_economy_data)
#Checking the datatypes
str(clean_economy_data)
#data summary statistics
summary(clean_economy_data)
##Describing both the quantitative and categorical columns
clean_economy_data %>% describe_all()
clean_economy_data %>% describe_cat(president)
#indroducing the data columns
clean_economy_data %>% introduce()
#plotting the intro
clean_economy_data %>% plot_intro()
clean_economy_data %>% plot_missing()
clean_economy_data %>% plot_density()
clean_economy_data %>%
select(-year) %>%
plot_histogram()
clean_economy_data %>% plot_bar()
## Relationships with maximum categories
clean_economy_data %>% plot_correlation(maxcat = 5)
clean_economy_data %>% plot_correlation(maxcat = 7)
#
#Giving all the names of the state without duplicate
president_names <- unique(clean_economy_data$president)
president_names
#filtering through the president's column to get names of presidents that are like the president's names
clean_economy_data2 <- clean_economy_data %>%
subset(president %in% president_names)
clean_economy_data2
#This shows the number of year count of  each president
tenure <- clean_economy_data2 %>%
group_by(president) %>%
summarise(Year_Count = n())
tenure
#Plotting the number of years used by each president
ggplot(tenure,aes(president,Year_Count,fill= president))+
geom_col()+theme_minimal() +
labs(title = "President's year count from 1990-2023",
x = "President",
y = "Year_count")
#Using qplot to compare the inflation and unemployent rate of each gorvernment
qplot(inflation_rate, unemployment, data = clean_economy_data2, facets = . ~ president,
geom = c("point", "smooth"))
# comparing various inflation rate of all the presidents
inflation <- ggplot(clean_economy_data, aes(president,inflation_rate,fill = president))+
geom_col() +
labs(title = "") +
labs(x = "President", y = "Inflation Rate")
ggplotly(inflation)
#comparing various unemployment rate of all the presidents
unemployent_rate <- ggplot(clean_economy_data, aes(president,unemployment,fill = president))+
geom_col() +
labs(title = "") +
labs(x = "President", y = "unemployent Rate")
unemployent_rate
names(clean_economy_data2)
#comparing various industrial_sector of all the presidents
industrial_sector <- ggplot(clean_economy_data, aes(president,industry,fill = president))+
geom_col() +
labs(title = "Industrial growth of all the Presidents") +
labs(x = "President", y = "Industry")
industrial_sector
#comparing various gdp_at_2010_constant_basic_prices of all the presidents against gdp_at_2010_constant_market_prices
Gdp <- ggplot(clean_economy_data, aes(gdp_at_2010_constant_market_prices,gdp_at_2010_constant_basic_prices))+
geom_point() +
facet_wrap(~ president)+
labs(title = "gdp_at_2010_constant_basic_prices") +
labs(x = "gdp_at_2010_constant_market_prices", y = "gdp_at_2010_constant_basic_prices")
Gdp
# Reshape data from wide to long format for plotting
long_sector_data <-  clean_economy_data %>%
gather(key = "sector", value = "GDP_Contribution", agriculture, industry, services)
# Plot the area chart
ggplot(long_sector_data, aes(x = year, y = GDP_Contribution, fill = sector)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Sectoral Contributions to GDP Over Time", x = "Year", y = "GDP Contribution") +
theme(legend.position = "top") +
scale_fill_brewer(palette = "Set3")
# Reshape data from wide to long format for plotting
long_sector_data <-  clean_economy_data %>%
gather(key = "sector", value = "GDP_Contribution", agriculture, industry, services)
# Plot the area chart
ggplot(long_sector_data, aes(x = year, y = GDP_Contribution, fill = sector)) +
geom_area(position = "stack") +
theme_minimal() +
labs(title = "Sectoral Contributions to GDP Over Time", x = "Year", y = "GDP Contribution") +
theme(legend.position = "top") +
scale_fill_brewer(palette = "Set3")
# Calculate the sum of contributions for each sector
sector_sums <- clean_economy_data %>%
summarize(
total_agriculture = sum(agriculture, na.rm = TRUE),
total_industry = sum(industry, na.rm = TRUE),
total_services = sum(services, na.rm = TRUE)
)
# Print the sum of contributions for each sector
print(sector_sums)
# A list of economic indicators to be plotted
economic_indicators <- c("inflation_rate","unemployment","government_debt","agriculture","industry",
"services","gdp_at_2010_constant_basic_prices",
"net_taxes_on_products","gdp_at_2010_constant_market_prices")
# Create a list to store plots
plots <- list()
# Loop through each economic indicator and create a ggplot
for (i in seq_along(economic_indicators)) {
indicator <- economic_indicators[i]
color <- scales::viridis_pal()(length(economic_indicators))[i]
indicators_plot <- ggplot(clean_economy_data2, aes(x = year, y = .data[[indicator]])) +
geom_line(color = color, size = 1) +
geom_point(color = color) +
labs(title = indicator, x = "year", y = indicator) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plots[[i]] <- indicators_plot
}
# Arrange plots in a grid
grid_layout <- grid.arrange(grobs = plots, ncol = 3, top = "Economic Trends in Nigeria from 1990-2023")
# Display the grid
grid_layout
#creating a scatter plot to see the correlation between unemployent and inflation rate
# Create the scatter plot
ggplot(clean_economy_data, aes(x = inflation_rate, y = unemployment)) +
geom_point() +
theme_minimal() +
labs(title = "Correlation between Inflation Rate and Unemployment",
x = "Inflation Rate",
y = "Unemployment")
shiny::runApp('SAIL_Innonvation_LAB_R-Progamming/R_assignment')
